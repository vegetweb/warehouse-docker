<?xml version="1.0" encoding="UTF-8"?>

<report title="MNHNL Dragonfly Species Download Report" description="Lists all occurrences associated with saved samples. Normally invoked from Reports tab on the form.">
  <params>
    <param name='survey_id' display='Survey: ' description='Select the survey to return data for:' datatype='lookup'
        query='SELECT id, title as caption FROM surveys' />
    <param name='target_species_attr' display='Target Species Attribute ID : ' description='Enter the attribute ID for the target species attribute:' datatype='int' />
    <param name='target_species_termlist' display='Target Species Termlist ID : ' description='Enter the ID for the target species termlist:' datatype='int' />
    <param name='target_species_attr_list' display='Target Species Attribute List : ' description='Enter a comma separated List of attribute ID used in the target species grid:' datatype='text' />
  </params>
  <table tablename="samples" where="#this#.deleted = FALSE
      and #this#.parent_id IS NULL
      and #this#.survey_id = #survey_id#" >
    <tabColumn name='id' display='Survey ID' visible='true'/>
    <tabColumn name='recorder_names' display='Recorder names' />
    <tabColumn name='date_start' visible='false'/>
    <tabColumn name='date_end' visible='false'/>
    <tabColumn name='date_type' visible='false'/>
    <tabColumn name='date' func="''" display='Visit date'/> // dummy field for the vague date processing, here so appears at logical position and with reasonable description in the report
    <tabColumn name='target_species' func="(regexp_replace(array(SELECT CASE WHEN sX.id IS NULL THEN '' ELSE term||'|'||
    regexp_replace(array(select 
      CASE WHEN sav.id IS NULL THEN CASE sa.data_type WHEN 'B' THEN 'N'  ELSE ''  END
      ELSE
        CASE sa.data_type
        WHEN 'L' THEN (select tt2.term from detail_termlists_terms tt2 where tt2.preferred='t' and tt2.meaning_id=sav.int_value)
        WHEN 'I' THEN sav.int_value::text
        WHEN 'B' THEN CASE int_value WHEN 0 THEN 'N' ELSE 'Y' END
        ELSE text_value
        END
      END
    FROM sample_attributes sa 
    LEFT JOIN sample_attribute_values sav ON (sav.sample_id=sX.id AND sav.sample_attribute_id = sa.id and sav.deleted='f')
    WHERE sa.id in (#target_species_attr_list#)
    and sa.deleted= 'f'
    ORDER BY SA.ID ASC)::text, '(\x22\x22)?,', '|', 'g')
  END 
  FROM detail_termlists_terms tt
  LEFT JOIN samples sX ON (sX.parent_id = #this#.id and sX.deleted='f' AND EXISTS (SELECT 1 from sample_attribute_values sav2 where sav2.sample_attribute_id = #target_species_attr# and sav2.int_value= tt.meaning_id and sav2.sample_id=sX.id and sav2.deleted='f'))
  WHERE tt.termlist_id = #target_species_termlist#)::text, '[{}\x22]', '', 'g'))" display='Target species'/>
    <tabColumn name='comment' display='Conditions comment'/>
    <subTable tablename="locations" > // allow deleted Sites!
      <tabColumn name='id' visible='true' display='Site_ID' />
      <tabColumn name='name' display='Site_name'/>
      <tabColumn name='points' display='XY point coordinates' func="(CASE
     WHEN #this#.boundary_geom is null THEN (replace(#this#.centroid_sref, ',' , ''))
     WHEN GeometryType(#this#.boundary_geom) = 'POINT' THEN regexp_replace(ST_AsText(ST_Transform(#this#.boundary_geom,2169)),'[(){}\x22]|\.[0-9]*|POINT','','g')
     WHEN GeometryType(#this#.boundary_geom) = 'MULTIPOINT' THEN regexp_replace(ST_AsText(ST_Transform(#this#.boundary_geom,2169)),'[(){}\x22]|\.[0-9]*|MULTIPOINT','', 'g')
     WHEN GeometryType(#this#.boundary_geom) = 'GEOMETRYCOLLECTION' AND NOT ST_IsEmpty(ST_CollectionExtract(#this#.boundary_geom, 1)) THEN regexp_replace(ST_AsText(ST_Transform(ST_CollectionExtract(#this#.boundary_geom,1),2169)),'[(){}\x22]|\.[0-9]*|MULTIPOINT','', 'g')
     ELSE ''
END)" />
      <tabColumn name='lines' display='XY line coordinates' func="(CASE
     WHEN GeometryType(#this#.boundary_geom) = 'LINESTRING'
       THEN regexp_replace(ST_AsText(ST_Transform(ST_Centroid(#this#.boundary_geom),2169)),'[(){}\x22]|\.[0-9]*|POINT','','g')
     WHEN GeometryType(#this#.boundary_geom) = 'MULTILINESTRING'
       THEN regexp_replace(array(SELECT ST_AsText(ST_Transform(st_centroid((ST_dump(xl.boundary_geom)).geom),2169)) FROM locations xl where xl.id = #this#.id )::text,'[(){}\x22]|\.[0-9]*|POINT','', 'g')
     WHEN GeometryType(#this#.boundary_geom) = 'GEOMETRYCOLLECTION' AND NOT ST_IsEmpty(ST_CollectionExtract(#this#.boundary_geom, 2))
       THEN regexp_replace(array(SELECT ST_AsText(st_transform(st_centroid((ST_dump(ST_CollectionExtract(xl2.boundary_geom,2))).geom),2169)) FROM locations xl2 where xl2.id = #this#.id )::text,'[(){}\x22]|\.[0-9]*|POINT','', 'g')
     ELSE ''
END)" />
      <tabColumn name='polygons' display='XY polygon coordinates' func="(CASE
     WHEN GeometryType(#this#.boundary_geom) = 'POLYGON'
       THEN regexp_replace(ST_AsText(ST_Transform(ST_Centroid(#this#.boundary_geom),2169)),'[(){}\x22]|\.[0-9]*|POINT','','g')
     WHEN GeometryType(#this#.boundary_geom) = 'MULTIPOLYGON'
       THEN regexp_replace(array(SELECT ST_AsText(ST_Transform(st_centroid((ST_dump(xl.boundary_geom)).geom),2169)) FROM locations xl where xl.id = #this#.id )::text,'[(){}\x22]|\.[0-9]*|POINT','', 'g')
     WHEN GeometryType(#this#.boundary_geom) = 'GEOMETRYCOLLECTION' AND NOT ST_IsEmpty(ST_CollectionExtract(#this#.boundary_geom, 3))
       THEN regexp_replace(array(SELECT ST_AsText(st_transform(st_centroid((ST_dump(ST_CollectionExtract(xl2.boundary_geom,3))).geom),2169)) FROM locations xl2 where xl2.id = #this#.id )::text,'[(){}\x22]|\.[0-9]*|POINT','', 'g')
     ELSE ''
END)" />
      <tabColumn name='comment' display='Site comment'/>
      <attributes separator='|' meaningIdLanguage='preferred'/>
    </subTable>
    <attributes separator='|' meaningIdLanguage='preferred'/>
    <subTable tablename="occurrences" parentKey="id" where=" #this#.deleted = FALSE" >
      <tabColumn name='id' visible='true' display='Occurrence ID' />
      <tabColumn name='comment' display='Occurrence comment' />
      <subTable tablename='cache_taxa_taxon_lists' parentKey="taxa_taxon_list_id" join="LEFT OUTER" >
        <tabColumn name='preferred_taxon' display='Species'/>
      </subTable>
      <tabColumn name='record_status' display='State' 
          func="(CASE #this#.record_status WHEN 'V' THEN 'Verified'::text WHEN 'D' THEN 'Dubious'::text WHEN 'R' THEN 'Rejected'::text WHEN 'I' THEN 'In progress'::text WHEN 'C' THEN 'Complete'::text WHEN 'S' THEN 'Awaiting check'::text ELSE #this#.record_status::text END)" />
      <attributes separator='|'  meaningIdLanguage='preferred'/> 
    </subTable>
  </table>
  <order_bys>
    <order_by>lt0_id ASC, lt2_id ASC</order_by>
  </order_bys>
</report>
